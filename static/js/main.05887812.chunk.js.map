{"version":3,"sources":["timeln.js","icard.js","infoview.js","ListMaker.js","resumedesc.js","App.js","serviceWorker.js","index.js"],"names":["Text","Typography","TL","mode","style","minWidth","position","left","paddingTop","Item","color","strong","type","LinkedIn","paddingLeft","class","data-version","data-size","data-locale","data-type","data-theme","data-vanity","href","Infoview","maxWidth","height","ListMaker","props","size","itemLayout","dataSource","indata","renderItem","item","Meta","title","Panel","Collapse","data_pl","data_q","data_web_framework","data_api","data_ml","data_nlp","data_db","data_nodb","data_bdb","data_engg","data_gdb","data_iot","data_devops","ResumeDesc","accordion","bordered","header","key","layout","column","xxl","xl","lg","md","sm","xs","label","Content","Layout","Header","Sider","App","background","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05887812.chunk.js","sourcesContent":["import { Timeline } from \"antd\";\nimport React from \"react\";\nimport { Typography } from 'antd';\nconst { Text } = Typography;\n\n\nfunction TL() {\n  return (\n    <Timeline mode=\"alternate\" style={{minWidth:\"400px\",position:\"absolute\",left:\"0\",paddingTop:\"30px\" }}>\n      <Timeline.Item color = \"blue\"><Text  strong>Vaultize </Text> <br/>  <Text type={\"secondary\"} > Intern</Text> <br/> <i>Aug 2014 - July 2015</i></Timeline.Item>\n      <Timeline.Item color = \"blue\"><Text strong>Launchyard </Text> <br/>  <Text type={\"secondary\"} > Software Engineer</Text> <br/> <i>July 2016 - Aug 2016</i></Timeline.Item>\n      <Timeline.Item color = \"blue\"><Text strong>CAPIOT Software </Text> <br/>  <Text type={\"secondary\"} > Associate Consultant</Text> <br/> <i>Sep 2016 - June 2017</i></Timeline.Item>\n      <Timeline.Item color = \"green\"><Text strong>CAPIOT Software </Text> <br/>  <Text type={\"secondary\"} > Data Engineer</Text> <br/> <i>July 2017 - Current</i></Timeline.Item>\n\n    </Timeline>\n  );\n}\n\nexport default TL;","import React from \"react\";\n\n\n\n\nfunction LinkedIn() {\n  return (\n    <div style= {{paddingLeft:\"60px\",paddingTop:\"30px\"}} >\n    <div class=\"LI-profile-badge\"  data-version=\"v1\" data-size=\"medium\" data-locale=\"en_US\" data-type=\"horizontal\" data-theme=\"light\" data-vanity=\"jaideepkekre\"><a class=\"LI-simple-link\" href='https://in.linkedin.com/in/jaideepkekre?trk=profile-badge'>Jaideep Kekre</a></div> \n    \n    </div>\n  );\n}\n\nexport  default LinkedIn;\n","import React from \"react\";\nimport TL from \"./timeln\";\nimport LinkedIn from \"./icard\";\n\nfunction Infoview() {\n  return (\n    <div style={{maxWidth: \"400px\"}}>\n      <div style={{ height: \"600px\"  }}>\n        <LinkedIn />\n        <TL />\n      </div>      \n    </div>\n  );\n}\n\nexport default Infoview;\n","import { List } from \"antd\";\nimport React from \"react\";\nimport { Typography } from 'antd';\n\n\n\n\n\nfunction ListMaker(props) {\n    return (\n\n        <List\n        size=\"small\"\n        itemLayout=\"horizontal\"\n        dataSource={props.indata}\n                renderItem={item => (\n                  <List.Item>\n                    <List.Item.Meta  title={<div style={{color:\"blue\"}} >{item}</div>}/>\n                  </List.Item>\n                )}\n    />\n    )\n    \n}\n\n\nexport default ListMaker;\n\n\n\n\n\n","import React from \"react\";\n\nimport { Descriptions } from \"antd\";\n\nimport { Collapse, List } from \"antd\";\n\nimport { Typography } from \"antd\";\nimport ListMaker from \"./ListMaker\";\n\nconst { Text } = Typography;\n\nconst { Panel } = Collapse;\n\nconst data_pl = [\"Python\", \"Golang\", \"Java\", \"Javascript\", \"R\"];\nconst data_q = [\"RabbitMQ\", \"Apache Kafka\", \"Redis\", \"Apache Ignite\"];\n\nconst data_web_framework = [\"ReactJS\"];\nconst data_api = [\n  \"Flask / Django/ AioHTTP (Python)\",\n  \"net/http (Golang)\",\n  \"SpringBoot  (Java)\",\n  \"OWIN (Azure .NET)\"\n];\n\nconst data_ml = [\"H20\", \"SkLearn\", \"Keras\", \"Scipy\"];\nconst data_nlp = [\n  \"RASA NLU\",\n  \"Wit.ai\",\n  \"Telegram\",\n  \"Gensim\",\n  \"NLTK\",\n  \"word2vec\",\n  \"fasttext\"\n];\n\nconst data_db = [\"MySQL\", \"Oracle\"];\nconst data_nodb = [\"MongoDB\", \"ElasticSearch\"];\nconst data_bdb = [\"HDFS\"];\nconst data_engg = [\"Python Pandas\", \"Apache Spark\", \"Open Refine\"];\nconst data_gdb = [\"Neo4J\"];\n\nconst data_iot = [\"MQTT\", \"Azure IoT Hub\"];\nconst data_devops = [\n  \"BuidBot\",\n  \"Jenkins\",\n  \"Kubernetes\",\n  \"Docker\",\n  \"Azure Service Fabric\",\n  \"Apache ServiceMix\"\n];\n\nfunction ResumeDesc() {\n  return (\n    <div\n      style={{\n              \n      }}\n    >\n      <Collapse accordion bordered={false} style={{maxWidth:\"400px\" }}>\n        <Panel header={<Text strong>Engineering</Text>} key=\"1\">\n          <Descriptions\n            title=\"\"\n            bordered\n            layout=\"vertical\"\n            size={\"small\"}\n            column={{ xxl: 2, xl: 2, lg: 2, md: 2, sm: 2, xs: 1 }}\n          >\n            <Descriptions.Item label=\"Programming Languages\">\n              <ListMaker indata={data_pl} />\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Queues & Caches \">\n              <ListMaker indata={data_q} />\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n\n        {/*  ------------- */}\n\n        <Panel header={<Text strong>API/UI</Text>} key=\"2\">\n          <Descriptions\n            title=\"\"\n            bordered\n            layout=\"vertical\"\n            size={\"small\"}\n            column={{ xxl: 2, xl: 2, lg: 2, md: 2, sm: 2, xs: 1 }}\n          >\n            <Descriptions.Item label=\"Web Frameworks\">\n              <ListMaker indata={data_web_framework} />\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Rest API frameworks\">\n              <ListMaker indata={data_api} />\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n\n        <Panel header={<Text strong>Analytics</Text>} key=\"3\">\n          <Descriptions\n            title=\"\"\n            bordered\n            layout=\"vertical\"\n            size={\"small\"}\n            column={{ xxl: 2, xl: 2, lg: 2, md: 2, sm: 2, xs: 1 }}\n          >\n            <Descriptions.Item label=\"Machine Learning\">\n              <ListMaker indata={data_ml} />\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Chatbots / NLP\">\n              <ListMaker indata={data_nlp} />\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n\n        {/*  ------------- */}\n\n        <Panel header={<Text strong>Data</Text>} key=\"4\">\n          <Descriptions\n            title=\"\"\n            bordered\n            layout=\"vertical\"\n            size={\"small\"}\n            column={{ xxl: 2, xl: 2, lg: 2, md: 2, sm: 2, xs: 1 }}\n          >\n            <Descriptions.Item label=\"SQL Databases\">\n              <ListMaker indata={data_db} />\n            </Descriptions.Item>\n            <Descriptions.Item label=\"NoSQL Databases\">\n              <ListMaker indata={data_nodb} />\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Graph Databases\">\n              <ListMaker indata={data_gdb} />\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Big Data Filesystems\">\n              <ListMaker indata={data_bdb} />\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Data Engineering\">\n              <ListMaker indata={data_engg} />\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n\n        {/*  ------------- */}\n\n        <Panel header={<Text strong>System</Text>} key=\"5\">\n          <Descriptions\n            title=\"\"\n            bordered\n            layout=\"vertical\"\n            size={\"small\"}\n            column={{ xxl: 2, xl: 2, lg: 2, md: 2, sm: 2, xs: 1 }}\n          >\n            <Descriptions.Item label=\"IoT\">\n              <ListMaker indata={data_iot} />\n            </Descriptions.Item>\n            <Descriptions.Item label=\"DevOps / Deployment\">\n              <ListMaker indata={data_devops} />\n            </Descriptions.Item>\n\n            <Descriptions.Item label=\"Servers / Reverse Proxy\">\n              <ListMaker indata={[\"Nginx\"]} />\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n\n        {/*  ------------- */}\n\n        <Panel header={<Text strong>Enterprise</Text>} key=\"6\">\n          <Descriptions\n            title=\"\"\n            bordered\n            layout=\"vertical\"\n            size={\"small\"}\n            column={{ xxl: 2, xl: 2, lg: 2, md: 2, sm: 2, xs: 1 }}\n          >\n            <Descriptions.Item label=\"Protocols\">\n              <ListMaker indata={[\"AS2\"]} />\n            </Descriptions.Item>\n            <Descriptions.Item label=\"Standards\">\n              <ListMaker indata={[\"HIPPA\", \"EDI\"]} />\n            </Descriptions.Item>\n          </Descriptions>\n        </Panel>\n      </Collapse>\n    </div>\n  );\n}\n\nexport default ResumeDesc;\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport Infoview from \"./infoview\"\nimport { Layout } from \"antd\";\nimport Resumedesc from \"./resumedesc\";\n\n\nconst { Header, Content,Sider } = Layout;\n\nfunction App() {\n  return (\n    <Layout>\n      <Content style={{ background: \"white\" }}>\n           <div >             \n           <Infoview/>  \n           </div>          \n         \n      </Content>\n      <footer style={{backgroundColor:\"white\"}} >\n        <Resumedesc />\n      </footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}