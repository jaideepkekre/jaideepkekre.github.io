{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["bg","getbackground","min","max","Math","ceil","floor","pos","random","App","class","style","backgroundImage","images","duration","transition","loop","speed","Backspace","count","Delay","ms","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAOIA,EAAK,CACP,4DACA,wDACA,6DACA,6DACA,wDACA,8DAGF,SAASC,IACP,IAAIC,EAAM,EACNC,EAAK,EACTD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACjB,IAAII,EAAMH,KAAKE,MAAMF,KAAKI,UAAYL,EAAMD,EAAM,IAAMA,EACxD,OAAOF,EAAGO,GAoDGE,MAjDf,WACE,OAEE,yBAAKC,MAAM,aAAaC,MAAO,CAAEC,gBAAiB,OAASX,IAAkB,MAC3E,kBAAC,IAAD,CACEY,OAAQb,EACRc,SAAU,EAAGC,WAAY,IAC3B,yBAAKL,MAAM,QACP,iCAEA,mCAFA,KAIC,oCAJD,KAMA,mCANA,IAQA,qCAGJ,yBAAKA,MAAM,SACX,kBAAC,IAAD,CAAQM,MAAM,EAAMC,MAAO,KAA3B,SAEE,kBAAC,IAAOC,UAAR,CAAkBC,MAAO,IACzB,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAHpB,UAKE,kBAAC,IAAOH,UAAR,CAAkBC,MAAO,IACzB,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MANpB,WAQE,kBAAC,IAAOH,UAAR,CAAkBC,MAAO,IACzB,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MATpB,eAWE,kBAAC,IAAOH,UAAR,CAAkBC,MAAO,KACzB,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAZpB,eAcE,kBAAC,IAAOH,UAAR,CAAkBC,MAAO,KACzB,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAfpB,YAiBE,kBAAC,IAAOH,UAAR,CAAkBC,MAAO,KACzB,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAlBpB,QAoBE,kBAAC,IAAOH,UAAR,CAAkBC,MAAO,SCrDbG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8afd7869.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport BackgroundSlider from 'react-background-slider'\n\nimport Typing from 'react-typing-animation';\n\n\nvar bg = [\n  \"https://media.giphy.com/media/l3UcrZHrGW2CjHXqM/giphy.gif\",\n  \"https://media.giphy.com/media/7bEpr3NIPNY0E/giphy.gif\",\n  \"https://media.giphy.com/media/k5zu35npVsYfgZQwwl/giphy.gif\",\n  \"https://media.giphy.com/media/pHZ8BBgLaXPliFNudh/giphy.gif\",\n  \"https://media.giphy.com/media/x45I8CY1Vs45G/giphy.gif\",\n  \"https://media.giphy.com/media/wKnqovL33x9in9ci6X/giphy.gif\",\n]\n\nfunction getbackground() {\n  var min = 0\n  var max =5\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  var pos = Math.floor(Math.random() * (max - min + 1)) + min;\n  return bg[pos]\n}\n\nfunction App() {  \n  return (\n    \n    <div class=\"background\" style={{ backgroundImage: 'url(' + getbackground() + ')' }} >\n      <BackgroundSlider\n        images={bg}\n        duration={5} transition={2} />\n      <div class=\"logo\">       \n          <b>\n            Jai\n          <span>d</span>\n            ee\n           <span>p </span>\n            Ke\n          <span>K</span>\n            r\n          <span>e</span>\n          </b>\n      </div>\n      <div class=\"typer\">\n      <Typing loop={true} speed={250}>\n        PYTHON\n        <Typing.Backspace count={9} />\n        <Typing.Delay ms={1000} />\n        GO LANG\n        <Typing.Backspace count={9} />\n        <Typing.Delay ms={1000} />\n        REACT JS \n        <Typing.Backspace count={9} />\n        <Typing.Delay ms={1000} />\n        APACHE SPARK\n        <Typing.Backspace count={14} />\n        <Typing.Delay ms={1000} />\n        APACHE KAFKA\n        <Typing.Backspace count={14} />\n        <Typing.Delay ms={1000} />\n        RABBIT MQ\n        <Typing.Backspace count={14} />\n        <Typing.Delay ms={1000} />\n        NGINX\n        <Typing.Backspace count={14} />\n        </Typing>\n      </div>\n      {/* <audio src=\"https://file-examples.com/wp-content/uploads/2017/11/file_example_MP3_700KB.mp3\" type=\"audio/mpeg\"  autoPlay /> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}